1.Что такое сериализация/дессериализация?
Сериализация – запись объекта в поток
Десериализация – чтение объекта из потока

2.Какая последовательность работы с потоком?
1)Открытие потока для чтения из файла, для записи в файл и т.п.
2)Чтение данных(если поток входной)
3)Запись данных(если поток выходной)
4)Закрытие потока для освобождения ресурсов и предотвращения утечки памяти.
5)Обработка ошибок(рекомендуется использовать блоки try-catch или throws)

3.Какие виды потоков существуют?
Потоки ввода вывода - Streams, которые в свою очередь разделяются на потоки
для побайтового чтения и посимвольного
Многопоточность (Thread - класс, Runnable - интерфейс)
1)Потоки ввода-вывода (IO Streams): для работы с данными.
2)Потоки байтов (Byte Streams): для чтения и записи отдельных байтов.
3)Потоки символов (Character Streams): для работы с символами.
4)Потоки объектов (Object Streams): для сериализации объектов.
5)Потоки файлов (File Streams): используются для работы с файлами на диске. 
6)Потоки буферизации (Buffered Streams): обеспечивают более эффективную работу с данными, добавляя буферизацию к обычным потокам.
7)Потоки-демоны (Daemon Threads): используются для выполнения задач, которые не являются критически важными и могут быть прерваны без вреда для приложения.

4.Чем отличается IO от NIO?
-Java IO является потокоориентированным, а Java NIO – буфер-ориентированным. 
 То есть IO основан на потоках: данные обрабатываются с использованием потоков ввода и вывода, а NIO основан на буферах: данные обрабатываются с использованием буферов.
-IO менее эффективен при работе с большим количеством соединений, а NIO более эффективен при работе с большим количеством соединений.
-При использовании IO, операции ввода/вывода блокируют поток выполнения до завершения операции. Это означает, что поток будет ожидать, пока данные не будут доступны или записаны.
 NIO предоставляет неблокирующие операции ввода/вывода с использованием каналов и селекторов. Это позволяет одному потоку обрабатывать несколько соединений.